//Last Updated 2016-10-23
package com.sample

//list any import classes here.
import function com.sample.DRLLogger.*;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.lang.String;

import com.sample.model.ConceptSetItem;
import com.sample.model.RHSState;

import edu.pitt.dbmi.ohdsiv5.db.ConditionEra;
import edu.pitt.dbmi.ohdsiv5.db.DrugEra;
import edu.pitt.dbmi.ohdsiv5.db.DrugExposure;
import edu.pitt.dbmi.ohdsiv5.db.DrugStrength;
import edu.pitt.dbmi.ohdsiv5.db.ExtendedDrugExposure;
import edu.pitt.dbmi.ohdsiv5.db.Measurement;
import edu.pitt.dbmi.ohdsiv5.db.Person;


/////////// 
// declare any global variables here
/////////// 
global org.hibernate.Session hibernateSession;


/////////// 
// declare any types here
/////////// 


/////////// 
// Rules
/////////// 

rule "WARFARIN - NSAID -- NO FILTER" // Concept sets exclude topical/opthalmic NSAIDs
    when
      // Warfarin ingredient drug era
      $clinDrugConcept1 : ConceptSetItem(csName == "Warfarin Ingredients")
      $de1 : DrugEra(drugConceptId == $clinDrugConcept1.getConceptId()) 
      
      // NSAID ingredient drug era
      $clinDrugConcept2 : ConceptSetItem(csName == "NSAIDs Ingredients")
      $de2 : DrugEra(PersonId == $de1.getPersonId() && drugConceptId == $clinDrugConcept2.getConceptId())

      // Specific warfarin exposure - DrugExposures often only have
      //the start date so the DrugEra is used to infer the exposure
      //period
      $clinDrugConcept3 : ConceptSetItem(csName == "Warfarins")
      $dexp1 : ExtendedDrugExposure(personId == $de1.getPersonId() && drugExposureStartDate == $de1.getDrugEraStartDate() && drugConceptId == $clinDrugConcept3.getConceptId() && ingredientConceptId == $clinDrugConcept1.getConceptId())
   
      // Specific NSAID exposure
      $clinDrugConcept4 : ConceptSetItem(csName == "NSAIDs")
      $dexp2 : ExtendedDrugExposure(personId == $de1.getPersonId() && drugExposureStartDate == $de2.getDrugEraStartDate() && drugConceptId == $clinDrugConcept4.getConceptId() && ingredientConceptId == $clinDrugConcept2.getConceptId())

      $person : Person(personId == $de1.getPersonId())
    then	
      // Create a state object for the current node in the decision tree to be used by other LHS
      RHSState rhsCur = new RHSState("basic concomitant exposure of warfarin and NSAID", "yes", $person);
      insertLogical(rhsCur);
    
      String s = String.format(
          "Matched drug EXPOSURE ids for patient (clinical drug): %s; Anticoagulant: %s; NSAID: %s.", 
          $de1.getPersonId(), 
          $clinDrugConcept3.getConceptId(), 
          $clinDrugConcept4.getConceptId());
      System.out.println(s);
end

rule "WARFARIN - NSAID -- PPI or misoprostol"
    when
        $rhs : RHSState(stateName == "basic concomitant exposure of warfarin and NSAID" && state == "yes")
        
        // PPI or Misoprostol drug era
        $clinDrugConcept1 : ConceptSetItem(csName == "PPIs Ingredients")
        $de1 : DrugEra(personId == $rhs.getPerson().getPersonId() && drugConceptId == $clinDrugConcept1.getConceptId())
                                      
        // Specific PPI or Misoprostol exposure 
        $clinDrugConcept2 : ConceptSetItem(csName == "PPIs")
        $dexp1 : ExtendedDrugExposure(personId == $rhs.getPerson().getPersonId() && drugExposureStartDate == $de1.getDrugEraStartDate() && drugConceptId == $clinDrugConcept2.getConceptId() && ingredientConceptId == $clinDrugConcept1.getConceptId())                
    then	
        RHSState rhsNN = new RHSState("proton pump inhibitor or misoprostol", "yes", $rhs.getPerson());
        insertLogical(rhsNN);
        
        String s = String.format(
          "Warfarin - NSAID interaction for patient: %s.\n\tClinical implication: Possible increased risk of UGIB or other bleeding\n\tMitigating factor: Presence of PPI or misoprostol (%s).\n\tRecommendation: Assess risk and take action if necessary.\n\tExplanation:  Proton pump inhibitors and misoprostol may reduce the risk of UGIB in patients receiving NSAIDs and warfarin.ï€ ", 
          $de1.getPersonId(), 
          $dexp1.getDrugConceptId());
        System.out.println(s);
end

rule "WARFARIN - NSAID -- no PPI or misoprostol - YES AGE"
    when
        $rhs1 : RHSState(stateName == "basic concomitant exposure of warfarin and NSAID" && state == "yes", $person : person)

        not ($rhs2 : RHSState(stateName == "proton pump inhibitor or misoprostol" && state == "yes" && person.getPersonId() == $person.getPersonId()))
        
        Person(personId == $person.getPersonId() && yearOfBirth <= 1951)
    then	
        RHSState rhsNN = new RHSState("no PPI or misoprostol - yes age or conditions", "yes", $person);
        insertLogical(rhsNN);
        
        String s = String.format(
            "Warfarin - NSAID interaction - matched 'no PPI or misoprostol - YES AGE' for patient: (%s.)", 
            $person.getPersonId());
        System.out.println(s);
end

rule "WARFARIN - NSAID -- no PPI or misoprostol - YES CONDITIONS"
    when
        $rhs1 : RHSState(stateName == "basic concomitant exposure of warfarin and NSAID" && state == "yes", $person : person)

        not ($rhs2 : RHSState(stateName == "proton pump inhibitor or misoprostol" && state == "yes" && person.getPersonId() == $person.getPersonId()))
	
	$condConcept1 : ConceptSetItem(csName == "History of GI Bleeds")
	
        $ce1 : ConditionEra(PersonId == $person.getPersonId() && conditionConceptId == $condConcept1.getConceptId())
    then	
        RHSState rhsNN = new RHSState("no PPI or misoprostol - yes age or conditions", "yes", $person);
        insertLogical(rhsNN);
        
        String s = String.format(
            "Warfarin - NSAID interaction - matched 'no PPI or misoprostol - YES CONDITIONS' for patient: (%s.)", 
            $person.getPersonId());
        System.out.println(s);
end

rule "WARFARIN - NSAID -- no PPI or misoprostol - NO age or conditions - YES other risk drugs"
    when
        $rhs1 : RHSState(stateName == "basic concomitant exposure of warfarin and NSAID" && state == "yes", $person : person)

        not (RHSState(stateName == "proton pump inhibitor or misoprostol" && state == "yes" && person.getPersonId() == $person.getPersonId()))
        
        not (RHSState(stateName == "no PPI or misoprostol - yes age or conditions" && state == "yes" && person.getPersonId() == $person.getPersonId()))
        
        $clinDrugConcept1 : ConceptSetItem(csName == "Corticosteroids Ingredients" || csName == "Aldosterone Antagonists Ingredients")
        $de1 : DrugEra(personId == $rhs1.getPerson().getPersonId() && drugConceptId == $clinDrugConcept1.getConceptId())
        
        $clinDrugConcept2 : ConceptSetItem(csName == "Systemic Corticosteroids" || csName == "Aldosterone Antagonists")
        $dexp1 : ExtendedDrugExposure(personId == $rhs1.getPerson().getPersonId() && drugExposureStartDate == $de1.getDrugEraStartDate() && drugConceptId == $clinDrugConcept2.getConceptId() && (ingredientConceptId == $clinDrugConcept1.getConceptId() || ingredientConceptId == $clinDrugConcept2.getConceptId()))        
    then	
        RHSState rhsNN = new RHSState("no PPI or misoprostol - NO age or conditions - YES other risk drugs", "yes", $person);
        insertLogical(rhsNN);
        
        String s = String.format(
            "Warfarin - NSAID interaction for patient: %s.\n\tClinical implication: Increased risk of UGIB or other bleeding\n\tContextual factor: No age or condition risks but risk increasing drug factor (%s).\n\tRecommendation: Use only if benefit outweighs risk.\n\tExplanation: Both corticosteroids and aldosterone antagonists have been shown to substantially increase the risk of UGIB in patients on NSAIDs, with relative risks of 12.8 and 11 respectively compared to a risk of 4.3 with NSAIDs \talone (Masclee et al. Gastroenterology 2014;147:784-92.)", 
            $person.getPersonId(), 
            $dexp1.getDrugConceptId());
        System.out.println(s);
end

rule "WARFARIN - NSAID -- no PPI or misoprostol - YES age or conditions - YES other risk drugs"
    when
        $rhs1 : RHSState(stateName == "basic concomitant exposure of warfarin and NSAID" && state == "yes", $person : person)

        not (RHSState(stateName == "proton pump inhibitor or misoprostol" && state == "yes" && person.getPersonId() == $person.getPersonId()))
        
        RHSState(stateName == "no PPI or misoprostol - yes age or conditions" && state == "yes" && person.getPersonId() == $person.getPersonId())
        
        $clinDrugConcept1 : ConceptSetItem(csName == "Corticosteroids Ingredients" || 
                                      csName == "Aldosterone Antagonists Ingredients")
        $de1 : DrugEra(personId == $rhs1.getPerson().getPersonId() && drugConceptId == $clinDrugConcept1.getConceptId())
        
        $clinDrugConcept2 : ConceptSetItem(csName == "Systemic Corticosteroids" || 
                                           csName == "Aldosterone Antagonists")
        $dexp1 : ExtendedDrugExposure(personId == $rhs1.getPerson().getPersonId() && drugExposureStartDate == $de1.getDrugEraStartDate() && drugConceptId == $clinDrugConcept2.getConceptId() && (ingredientConceptId == $clinDrugConcept1.getConceptId() || ingredientConceptId == $clinDrugConcept2.getConceptId()))        
    then	
        RHSState rhsNN = new RHSState("no PPI or misoprostol - YES age or conditions - YES other risk drugs", "yes", $person);
        insertLogical(rhsNN);
        
        String s = String.format(
            "Warfarin - NSAID interaction for patient: %s.\n\tClinical implication: Substantially increased risk of UGIB or other bleeding\n\tContextual factor: Age or condition risks AND risk increasing drug factor (%s).\n\tRecommendation: Use only if benefit outweighs risk.\n\tExplanation: Patients with a history of UGIB or peptic ulcer may have an increased risk of UGIB from this interaction. The extent to which older age is an independent risk factor for UGIB due to these interactions is not firmly \n\testablished, but UGIB in general is known to increase with age. Both corticosteroids and aldosterone antagonists have been shown to substantially increase the risk of UGIB in patients on NSAIDs, with relative risks of 12.8 and \n\t11 respectively compared to a risk of 4.3 with NSAIDs alone (Masclee et al. Gastroenterology 2014;147:784-92.)", 
            $person.getPersonId(), 
            $dexp1.getDrugConceptId());
        System.out.println(s);
end

rule "WARFARIN - NSAID -- no PPI or misoprostol - YES age or conditions - NO other risk drugs"
    when
        $rhs1 : RHSState(stateName == "basic concomitant exposure of warfarin and NSAID" && state == "yes", $person : person)

        not (RHSState(stateName == "proton pump inhibitor or misoprostol" && state == "yes" && person.getPersonId() == $person.getPersonId()))
        
        RHSState(stateName == "no PPI or misoprostol - yes age or conditions" && state == "yes" && person.getPersonId() == $person.getPersonId())
        
        not (RHSState(stateName == "no PPI or misoprostol - YES age or conditions - YES other risk drugs" && state == "yes" && person.getPersonId() == $person.getPersonId()))
    then	
        RHSState rhsNN = new RHSState("no PPI or misoprostol - YES age or conditions - NO other risk drugs", "yes", $person);
        insertLogical(rhsNN);
        
        String s = String.format(
            "Warfarin - NSAID interaction for patient: %s.\n\tClinical implication: Increased risk of UGIB or other bleeding\n\tContextual factor: Age or condition risks but NO risk increasing drug factor.\n\tRecommendation: Use only if benefit outweighs risk.\n\tExplanation: Patients with a history of UGIB or peptic ulcer may have an increased risk of UGIB from this interaction. The extent to which older age is an independent risk factor for UGIB due to these interactions \n\tis not firmly established, but UGIB in general is known to increase with age.", 
            $person.getPersonId());
        System.out.println(s);
end

rule "WARFARIN - NSAID -- no PPI or misoprostol - NO age or conditions - NO other risk drugs"
    when
        $rhs1 : RHSState(stateName == "basic concomitant exposure of warfarin and NSAID" && state == "yes", $person : person)

        not (RHSState(stateName == "proton pump inhibitor or misoprostol" && state == "yes" && person.getPersonId() == $person.getPersonId()))
        
        not (RHSState(stateName == "no PPI or misoprostol - yes age or conditions" && state == "yes" && person.getPersonId() == $person.getPersonId()))
	
	not (RHSState(stateName == "no PPI or misoprostol - NO age or conditions - YES other risk drugs" && state == "yes" && person.getPersonId() == $person.getPersonId()))     
    then	
        RHSState rhsNN = new RHSState("no PPI or misoprostol - NO age or conditions - NO other risk drugs", "yes", $person);
        insertLogical(rhsNN);
        
        String s = String.format(
            "Warfarin - NSAID interaction for patient: %s.\n\tClinical implication: Increased risk of UGIB or other bleeding.\n\tContextual factor: No age, condition, or drug factor risks.\n\tRecommendation: Use only if benefit outweighs risk.", 
            $person.getPersonId());
        System.out.println(s);
end

rule "K/K-SPARING DIURETIC -- NO FILTER"
    when
      // Potassium prep ingredient drug era
      $clinDrugConcept1 : ConceptSetItem(csName == "Potassium Ingredients")
      $de1 : DrugEra(drugConceptId == $clinDrugConcept1.getConceptId())       
      // Diuretics ingredient drug era
      $clinDrugConcept2 : ConceptSetItem(csName == "K-sparing Diuretics Ingredients")
      $de2 : DrugEra(personId == $de1.getPersonId() && drugConceptId == $clinDrugConcept2.getConceptId())
      // Load concept sets
      $clinDrugConcept3 : ConceptSetItem(csName == "Potassiums")
      $clinDrugConcept4 : ConceptSetItem(csName == "K-sparing Diuretics")
      // Check exposure to a potassium preparation
      $dexp1 : ExtendedDrugExposure(personId == $de1.getPersonId() && drugExposureStartDate == $de1.getDrugEraStartDate() && drugConceptId == $clinDrugConcept3.getConceptId() && ingredientConceptId == $clinDrugConcept1.getConceptId())
      $dexp2 : ExtendedDrugExposure(personId == $de1.getPersonId() && drugExposureStartDate == $de2.getDrugEraStartDate() && drugConceptId == $clinDrugConcept4.getConceptId() && ingredientConceptId == $clinDrugConcept2.getConceptId())
      // Set the patient to a person variable so the RHS can be assigned
      $person : Person(personId == $de1.getPersonId())
    then
      // Create a state object for the current node in the decision tree to be used by other LHS
      RHSState rhsCur = new RHSState("basic concomitant exposure of K and a K-sparing diuretic", "yes", $person);
      insertLogical(rhsCur);
      // Output a string that informs the user that there has been a match on drug exposures, indicating that the rules will proceed to the next steps
      String s = String.format(
          "Matched drug EXPOSURE ids for patient (clinical drug): %s; Potassium Prep: %s; K-sparing Diuretic: %s.", 
          $de1.getPersonId(), 
          $clinDrugConcept3.getConceptId(), 
          $clinDrugConcept4.getConceptId());
      System.out.println(s);
end

rule "K/K-SPARING DIURETIC -- Serum Potassium"
    when
	// First check that patient was exposed to potassium and a diuretic
        $rhs : RHSState(stateName == "basic concomitant exposure of K and a K-sparing diuretic" && state == "yes", $person : person)
	// Take patient from RHS and check if that patient has a serum potassium value of > 4.5
	$measurement : Measurement(personId == $person.getPersonId() && measurementConceptId == 3023103 && valueAsNumber > 4.5 && unitConceptId == 9557)
    then	
	// Create a state object for the current node in the decision tree to be used by other LHS
        RHSState rhsNN = new RHSState("serum potassium high", "yes", $rhs.getPerson());
        insertLogical(rhsNN);
        // Output a string that provides clinician with details for action
        String s = String.format(
          "K - K-sparing diuretic interaction for patient: %s.\n\tClinical implication: Possible increased risk of hyperkalemia.\n\tMitigating factor: High serum potassium (%s mEq/L).\n\tRecommendation: Use only if benefit outweighs risk.\n\tExplanation:  High serum potassium is considered to be a risk factor that increases chance of hyperkalemia in patients on both a potassium preparation and a K-sparing diuretic.", 
          $person.getPersonId(),
	  $measurement.getValueAsNumber());
        System.out.println(s);
end

rule "K/K-SPARING DIURETIC -- ACEi or ARB"
    when
	// Fist check if patient was exposed to both potassium and a diuretic
        $rhs : RHSState(stateName == "basic concomitant exposure of K and a K-sparing diuretic" && state == "yes", $person : person)
	// Next make sure the patient did not meet the high serum potassium rule (shouldn't continue on if so)
	not ($rhs2 : RHSState(stateName == "serum potassium high" && state == "yes" && person.getPersonId() == $person.getPersonId()))
        // PPI or Misoprostol drug era
        $clinDrugConcept1 : ConceptSetItem(csName == "ACEis and ARBs Ingredients")
        $de1 : DrugEra(personId == $person.getPersonId() && drugConceptId == $clinDrugConcept1.getConceptId())        
        // Specific PPI or Misoprostol exposure 
        $clinDrugConcept2 : ConceptSetItem(csName == "ACEis and ARBs")
        $dexp1 : ExtendedDrugExposure(personId == $person.getPersonId() && drugExposureStartDate == $de1.getDrugEraStartDate() && drugConceptId == $clinDrugConcept2.getConceptId() && ingredientConceptId == $clinDrugConcept1.getConceptId())                
    then	
        RHSState rhsNN = new RHSState("ACEi or ARB", "yes", $rhs.getPerson());
        insertLogical(rhsNN);
        
        String s = String.format(
          "K - K-sparing diuretic interaction for patient: %s.\n\tClinical implication: Possible increased risk of hyperkalemia.\n\tMitigating factor: Presence of ACEi or ARB (%s).\n\tRecommendation: Use only if benefit outweighs risk.\n\tExplanation:  ACEi and ARB are considered risk factors that increase chance of hyperkalemia in patients on both KCL and a K-sparing diuretic.", 
          $de1.getPersonId(), 
          $dexp1.getDrugConceptId());
        System.out.println(s);
end

rule "K/K-SPARING DIURETIC -- Creatinine Clearance"
    when
	// First check that patient was exposed to potassium and a diuretic
        $rhs : RHSState(stateName == "basic concomitant exposure of K and a K-sparing diuretic" && state == "yes", $person : person)
	// Next make sure the patient did not meet the high serum potassium rule
	not ($rhs2 : RHSState(stateName == "serum potassium high" && state == "yes" && person.getPersonId() == $person.getPersonId()))
	// Next make sure the patient did not meet the ACEi or ARB rule
	not ($rhs3 : RHSState(stateName == "ACEi or ARB" && state == "yes" && person.getPersonId() == $person.getPersonId()))
	// Take patient from RHS and check if that patient has a serum potassium value of < 4.5
	$measurement : Measurement(personId == $person.getPersonId() && measurementConceptId == 3016723 && valueAsNumber < 30 && unitConceptId == 8795)
    then	
	// Create a state object for the current node in the decision tree to be used by other LHS
        RHSState rhsNN = new RHSState("creatinine clearance low", "yes", $rhs.getPerson());
        insertLogical(rhsNN);
        // Output a string that provides clinician with details for action
        String s = String.format(
          "K - K-sparing diuretic interaction for patient: %s.\n\tClinical implication: Possible increased risk of hyperkalemia.\n\tMitigating factor: Low creatinine clearance level (%s ml/min).\n\tRecommendation: Use only if benefit outweighs risk.\n\tExplanation:  Low creatinine clearance level is considered to be a risk factor that increases chance of hyperkalemia in patients on both a potassium preparation and a K-sparing diuretic.", 
          $person.getPersonId(),
	  $measurement.getValueAsNumber());
        System.out.println(s);
end

rule "K/K-SPARING DIURETIC -- Potassium Dosage"
    when
	// First check that patient was exposed to potassium and a diuretic
        $rhs : RHSState(stateName == "basic concomitant exposure of K and a K-sparing diuretic" && state == "yes", $person : person)
	// Next make sure the patient did not meet the high serum potassium rule
	not ($rhs2 : RHSState(stateName == "serum potassium high" && state == "yes" && person.getPersonId() == $person.getPersonId()))
	// Next make sure the patient did not meet the ACEi or ARB rule
	not ($rhs3 : RHSState(stateName == "ACEi or ARB" && state == "yes" && person.getPersonId() == $person.getPersonId()))
	// Finally, make sure the patient did not meet the creatine clearance rule
	not ($rhs4 : RHSState(stateName == "creatinine clearance low" && state == "yes" && person.getPersonId() == $person.getPersonId()))
	// Take patient from RHS and check if that patient has a serum potassium value of < 4.5
	$clinDrugConcept1 : ConceptSetItem(csName == "Potassium Ingredients")
	$de1 : DrugEra(personId == $person.getPersonId() && drugConceptId == $clinDrugConcept1.getConceptId())
	$clinDrugConcept2 : ConceptSetItem(csName == "Potassiums")
	$dexp1 : ExtendedDrugExposure(personId == $person.getPersonId() && drugExposureStartDate == $de1.getDrugEraStartDate() && drugConceptId == $clinDrugConcept2.getConceptId() && ingredientConceptId == $clinDrugConcept1.getConceptId()
	&& dailyDosage >= 80.0)
    then	
	// Create a state object for the current node in the decision tree to be used by other LHS
        RHSState rhsNN = new RHSState("k - diuretic, normal potassium, no drugs, normal creatinine, high potassium dose", "yes", $rhs.getPerson());
        insertLogical(rhsNN);
        // Output a string that provides clinician with details for action
        String s = String.format(
          "K - K-sparing diuretic interaction for patient: %s.\n\tClinical implication: Possible increased risk of hyperkalemia.\n\tMitigating factor: High dosage of potassium (%s mEq).\n\tRecommendation: Use only if benefit outweighs risk.\n\tExplanation: Giving a patient on both a potassium preparation and a K-sparing diuretic a high dose of potassium is considered to be a risk factor that increases chance of hyperkalemia.", 
          $person.getPersonId(),
	  $dexp1.getDailyDosage());
        System.out.println(s);
end