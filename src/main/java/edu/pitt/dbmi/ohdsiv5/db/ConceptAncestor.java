package edu.pitt.dbmi.ohdsiv5.db;
               # Replace Windows newlines with Unix newlines// Generated Aug 25, 2010 7:48:41 AM by Hibernate Tools 3.1.0.beta4
               # Replace Windows newlines with Unix newlines
               # Replace Windows newlines with Unix newlines
               # Replace Windows newlines with Unix newlines/**
               # Replace Windows newlines with Unix newlines * ConceptAncestor generated by hbm2java
               # Replace Windows newlines with Unix newlines */
               # Replace Windows newlines with Unix newlines@Entity
               # Replace Windows newlines with Unix newlines@Table(name="CONCEPT_ANCESTOR", uniqueConstraints = {  })
               # Replace Windows newlines with Unix newlines
               # Replace Windows newlines with Unix newlinespublic class ConceptAncestor  {
               # Replace Windows newlines with Unix newlines
               # Replace Windows newlines with Unix newlines
               # Replace Windows newlines with Unix newlines    // Fields   
               # Replace Windows newlines with Unix newlines     private Integer ancestorConceptId;
               # Replace Windows newlines with Unix newlines     private Integer descendantConceptId;
               # Replace Windows newlines with Unix newlines     private Short maxLevelsOfSeparation;
               # Replace Windows newlines with Unix newlines     private Short minLevelsOfSeparation;
               # Replace Windows newlines with Unix newlines
               # Replace Windows newlines with Unix newlines
               # Replace Windows newlines with Unix newlines    // Constructors
               # Replace Windows newlines with Unix newlines
               # Replace Windows newlines with Unix newlines    /** default constructor */
               # Replace Windows newlines with Unix newlines    public ConceptAncestor() {
               # Replace Windows newlines with Unix newlines    }
               # Replace Windows newlines with Unix newlines
               # Replace Windows newlines with Unix newlines	/** minimal constructor */
               # Replace Windows newlines with Unix newlines    public ConceptAncestor(Integer ancestorConceptId, Integer descendantConceptId) {
               # Replace Windows newlines with Unix newlines        this.ancestorConceptId = ancestorConceptId;
               # Replace Windows newlines with Unix newlines        this.descendantConceptId = descendantConceptId;
               # Replace Windows newlines with Unix newlines    }
               # Replace Windows newlines with Unix newlines    
               # Replace Windows newlines with Unix newlines    /** full constructor */
               # Replace Windows newlines with Unix newlines    public ConceptAncestor(Integer ancestorConceptId, Integer descendantConceptId, Short maxLevelsOfSeparation, Short minLevelsOfSeparation) {
               # Replace Windows newlines with Unix newlines        this.ancestorConceptId = ancestorConceptId;
               # Replace Windows newlines with Unix newlines        this.descendantConceptId = descendantConceptId;
               # Replace Windows newlines with Unix newlines        this.maxLevelsOfSeparation = maxLevelsOfSeparation;
               # Replace Windows newlines with Unix newlines        this.minLevelsOfSeparation = minLevelsOfSeparation;
               # Replace Windows newlines with Unix newlines    }
               # Replace Windows newlines with Unix newlines   
               # Replace Windows newlines with Unix newlines    // Property accessors
               # Replace Windows newlines with Unix newlines    @Id
               # Replace Windows newlines with Unix newlines    @Column(name="ANCESTOR_CONCEPT_ID", unique=false, nullable=false, insertable=true, updatable=true, precision=8, scale=0)
               # Replace Windows newlines with Unix newlines
               # Replace Windows newlines with Unix newlines    public Integer getAncestorConceptId() {
               # Replace Windows newlines with Unix newlines        return this.ancestorConceptId;
               # Replace Windows newlines with Unix newlines    }
               # Replace Windows newlines with Unix newlines    
               # Replace Windows newlines with Unix newlines    public void setAncestorConceptId(Integer ancestorConceptId) {
               # Replace Windows newlines with Unix newlines        this.ancestorConceptId = ancestorConceptId;
               # Replace Windows newlines with Unix newlines    }
               # Replace Windows newlines with Unix newlines    @Column(name="DESCENDANT_CONCEPT_ID", unique=false, nullable=false, insertable=true, updatable=true, precision=8, scale=0)
               # Replace Windows newlines with Unix newlines
               # Replace Windows newlines with Unix newlines    public Integer getDescendantConceptId() {
               # Replace Windows newlines with Unix newlines        return this.descendantConceptId;
               # Replace Windows newlines with Unix newlines    }
               # Replace Windows newlines with Unix newlines    
               # Replace Windows newlines with Unix newlines    public void setDescendantConceptId(Integer descendantConceptId) {
               # Replace Windows newlines with Unix newlines        this.descendantConceptId = descendantConceptId;
               # Replace Windows newlines with Unix newlines    }
               # Replace Windows newlines with Unix newlines    @Column(name="MAX_LEVELS_OF_SEPARATION", unique=false, nullable=true, insertable=true, updatable=true, precision=3, scale=0)
               # Replace Windows newlines with Unix newlines
               # Replace Windows newlines with Unix newlines    public Short getMaxLevelsOfSeparation() {
               # Replace Windows newlines with Unix newlines        return this.maxLevelsOfSeparation;
               # Replace Windows newlines with Unix newlines    }
               # Replace Windows newlines with Unix newlines    
               # Replace Windows newlines with Unix newlines    public void setMaxLevelsOfSeparation(Short maxLevelsOfSeparation) {
               # Replace Windows newlines with Unix newlines        this.maxLevelsOfSeparation = maxLevelsOfSeparation;
               # Replace Windows newlines with Unix newlines    }
               # Replace Windows newlines with Unix newlines    @Column(name="MIN_LEVELS_OF_SEPARATION", unique=false, nullable=true, insertable=true, updatable=true, precision=3, scale=0)
               # Replace Windows newlines with Unix newlines
               # Replace Windows newlines with Unix newlines    public Short getMinLevelsOfSeparation() {
               # Replace Windows newlines with Unix newlines        return this.minLevelsOfSeparation;
               # Replace Windows newlines with Unix newlines    }
               # Replace Windows newlines with Unix newlines    
               # Replace Windows newlines with Unix newlines    public void setMinLevelsOfSeparation(Short minLevelsOfSeparation) {
               # Replace Windows newlines with Unix newlines        this.minLevelsOfSeparation = minLevelsOfSeparation;
               # Replace Windows newlines with Unix newlines    }
               # Replace Windows newlines with Unix newlines   
               # Replace Windows newlines with Unix newlines
               # Replace Windows newlines with Unix newlines
               # Replace Windows newlines with Unix newlines
               # Replace Windows newlines with Unix newlines
               # Replace Windows newlines with Unix newlines
               # Replace Windows newlines with Unix newlines
               # Replace Windows newlines with Unix newlines
               # Replace Windows newlines with Unix newlines
               # Replace Windows newlines with Unix newlines}
               # Replace Windows newlines with Unix newlines